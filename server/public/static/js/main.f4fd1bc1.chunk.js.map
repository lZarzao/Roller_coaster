{"version":3,"sources":["service/Auth.service.js","service/Coaster.service.js","components/coasters/Coaster-card.js","service/Files.service.js","components/coasters/Coaster-form.js","components/coasters/Coaster-list.js","components/coasters/Coaster-form-edit.js","components/coasters/Coaster-details.js","components/ui/Navbar.js","components/pages/Index.js","components/pages/Profile.js","components/auth/Signup.js","components/auth/Login.js","App.js","serviceWorker.js","index.js"],"names":["Services","signup","username","password","_service","post","login","logout","loggedin","get","this","axios","create","baseURL","process","withCredentials","getAllCoasters","getOneCoaster","id","postCoaster","coaster","putCoaster","deleteCoaster","CoasterCard","props","Col","className","md","src","imageUrl","alt","title","description","inversions","length","to","_id","React","Component","handleUpload","theFile","CoasterForm","handleSubmit","e","preventDefault","_coastersService","state","then","x","closeModalWindow","updateCoastersList","catch","err","console","log","handleInputChange","target","name","value","setState","handleFileUpload","disabledButton","buttonText","uploadData","FormData","append","files","_filesService","response","data","secure_url","CoastersService","FilesService","Form","onSubmit","Group","Label","Control","type","onChange","Button","variant","size","disabled","CoasterList","componentDidMount","allCoastersFromDB","coasters","handleShow","showModalWindow","handleClose","Service","Container","loggedInUser","onClick","Row","map","key","history","Modal","show","onHide","Header","closeButton","Title","Body","updateCoaster","CoasterDetail","coasterId","match","params","theCoaster","push","fetchUser","_authService","theLoggedInUserFromTheServer","AuthService","span","offset","Navigation","logoutUser","setUser","saludo","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","as","Text","Index","Profile","SignupForm","theNewUser","message","LoginForm","user","theLoggedUser","handleToastOpen","handleToastClose","showToast","toastText","text","Toast","onClose","delay","autohide","style","position","right","bottom","minWidth","App","setTheUser","exact","path","component","render","CoasterDetails","Signup","Login","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4fd1bc1.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default class Services {\n  constructor() {\n    this._service = axios.create({\n      baseURL: `${process.env.REACT_APP_URL}/auth`,\n      withCredentials: true, // RUTAS PERSISTENTES\n    });\n  }\n\n  signup = (username, password) =>\n    this._service.post(\"/signup\", { username, password });\n  login = (username, password) =>\n    this._service.post(\"/login\", { username, password });\n  logout = () => this._service.post(\"/logout\");\n  loggedin = () => this._service.get(\"/loggedin\");\n}\n","import axios from \"axios\";\n\nexport default class Services {\n  constructor() {\n    this._service = axios.create({\n      baseURL: `${process.env.REACT_APP_URL}/coasters`,\n      withCredentials: true, // RUTAS PERSISTENTES\n    });\n  }\n\n  getAllCoasters = () => this._service.get(\"/getAllCoasters\");\n  getOneCoaster = (id) => this._service.get(`/${id}`);\n  postCoaster = (coaster) => this._service.post(\"/new\", coaster);\n  putCoaster = (id, coaster) => this._service.post(`/edit/${id}`, coaster);\n  deleteCoaster = (id) => this._service.get(`/delete/${id}`);\n}\n","import React from 'react'\nimport Col from 'react-bootstrap/Col'\n\nimport { Link } from 'react-router-dom'\n\nclass CoasterCard extends React.Component{\n    constructor(props){\n        super(props)\n    }\n\n    render (){\n        return (\n            <Col className=\"coaster-card\" md={4}>\n                <img src={this.props.coaster.imageUrl} alt={this.props.coaster.title} />\n                <h3>{this.props.coaster.title}</h3>\n                <p>{this.props.coaster.description}</p>\n                <small>Inversiones: {this.props.coaster.inversions} | Longitud: {this.props.coaster.length}</small>\n                <br></br>\n                <Link className=\"btn btn-sm btn-dark\" to={`/coasters/${this.props.coaster._id}`}>Ver detalles</Link>\n            </Col >\n        )\n    }\n}\n\nexport default CoasterCard","import axios from \"axios\";\n\nexport default class Services {\n  constructor() {\n    this._service = axios.create({\n      baseURL: `${process.env.REACT_APP_URL}/files`,\n      withCredentials: true, // RUTAS PERSISTENTES\n    });\n  }\n\n  handleUpload = (theFile) => this._service.post(\"/upload\", theFile);\n}\n","import React, { Component } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n\nimport CoastersService from '../../service/Coaster.service'\nimport FilesService from '../../service/Files.service'\n\nclass CoasterForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this._coastersService = new CoastersService()\n        this._filesService = new FilesService()\n        this.state = {\n            disabledButton: false,\n            buttonText: 'Guardar',\n            coaster: {\n                title: \"\",\n                description: \"\",\n                inversions: 0,\n                length: 0,\n                imageUrl: \"\"\n            }\n        }\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        this._coastersService.postCoaster(this.state.coaster)\n            .then(x => {\n                this.props.closeModalWindow()\n                this.props.updateCoastersList()\n            })\n            .catch(err => console.log(err))\n    }\n\n\n    handleInputChange = e => {\n        let { name, value } = e.target\n        this.setState({\n            coaster: { ...this.state.coaster, [name]: value }\n        })\n    }\n\n    handleFileUpload = e => {\n        this.setState({ disabledButton: true, buttonText: 'Subiendo imagen...' })\n\n        const uploadData = new FormData()\n        uploadData.append(\"imageUrl\", e.target.files[0])\n        this._filesService.handleUpload(uploadData)\n            .then(response => {\n                console.log('Subida de archivo finalizada! La URL de Cloudinray es: ', response.data.secure_url)\n                this.setState({\n                    disabledButton: false,\n                    buttonText: 'Guardar',\n                    coaster: { ...this.state.coaster, imageUrl: response.data.secure_url }\n                })\n            })\n            .catch(err => console.log(err))\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Group>\n                    <Form.Label>Nombre</Form.Label>\n                    <Form.Control type=\"text\" name=\"title\" onChange={this.handleInputChange} value={this.state.coaster.title} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Descripción</Form.Label>\n                    <Form.Control type=\"text\" name=\"description\" onChange={this.handleInputChange} value={this.state.coaster.description} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Longitud</Form.Label>\n                    <Form.Control type=\"number\" name=\"length\" onChange={this.handleInputChange} value={this.state.coaster.length} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Inversiones</Form.Label>\n                    <Form.Control type=\"number\" name=\"inversions\" onChange={this.handleInputChange} value={this.state.coaster.inversions} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Imagen URL (archivo)</Form.Label>\n                    <Form.Control name=\"imageUrl\" type=\"file\" onChange={this.handleFileUpload} />\n                </Form.Group>\n                <Button variant=\"dark\" size=\"sm\" type=\"submit\" disabled={this.state.disabledButton}>{this.state.buttonText}</Button>\n            </Form>\n        )\n    }\n}\n\n\nexport default CoasterForm","import React from 'react'\nimport Service from '../../service/Coaster.service'\n\nimport { Container, Row, Button, Modal } from 'react-bootstrap'\n\nimport CoasterCard from './Coaster-card'\nimport CoasterForm from './Coaster-form'\n\nclass CoasterList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new Service()\n        this.state = {\n            coasters: [],\n            showModalWindow: false\n        }\n    }\n\n    componentDidMount = () => this.updateCoastersList()\n\n    updateCoastersList = () => {\n        this._service.getAllCoasters()\n            .then(allCoastersFromDB => this.setState({ coasters: allCoastersFromDB.data }))\n            .catch(err => console.log(\"Error\", err))\n    }\n\n    handleShow = () => this.setState({ showModalWindow: true })\n    handleClose = () => this.setState({ showModalWindow: false })\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <h1>Índice de montañas rusas</h1>\n                    <hr/>\n                    {\n                        this.props.loggedInUser && <Button variant=\"dark\" onClick={this.handleShow}>Nuevo</Button>\n                    }\n                    <Row>\n                        {this.state.coasters.map(coaster => <CoasterCard key={coaster._id} coaster={coaster} history={this.props.history}/>)}\n                    </Row>\n                </Container>\n                <Modal show={this.state.showModalWindow} onHide={this.handleClose}> \n                    <Modal.Header closeButton>\n                        <Modal.Title>Nueva montaña rusa</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <CoasterForm closeModalWindow={this.handleClose} updateCoastersList={this.updateCoastersList} />\n                    </Modal.Body>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default CoasterList","import React, { Component } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n\nimport CoastersService from '../../service/Coaster.service'\n\nclass CoasterForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this._coastersService = new CoastersService()\n        this.state = {\n          disabledButton: false,\n          buttonText: \"Guardar\",\n          coaster: {\n            title: this.props.coaster.title,\n            description: this.props.coaster.description,\n            inversions: this.props.coaster.inversions,\n            length: this.props.coaster.length,\n            imageUrl: this.props.coaster.imageUrl,\n          },\n        };\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        this._coastersService.putCoaster(this.props.coaster._id, this.state.coaster)\n            .then(x => {\n                this.props.closeModalWindow()\n                this.props.updateCoaster();\n            })\n            .catch(err => console.log(err))\n    }\n\n    handleInputChange = e => {\n        let { name, value } = e.target\n        this.setState({\n            coaster: { ...this.state.coaster, [name]: value }\n        })\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Group>\n                    <Form.Label>Nombre</Form.Label>\n                    <Form.Control type=\"text\" name=\"title\" onChange={this.handleInputChange} value={this.state.coaster.title} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Descripción</Form.Label>\n                    <Form.Control type=\"text\" name=\"description\" onChange={this.handleInputChange} value={this.state.coaster.description} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Longitud</Form.Label>\n                    <Form.Control type=\"number\" name=\"length\" onChange={this.handleInputChange} value={this.state.coaster.length} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Inversiones</Form.Label>\n                    <Form.Control type=\"number\" name=\"inversions\" onChange={this.handleInputChange} value={this.state.coaster.inversions} />\n                </Form.Group>\n                <Button variant=\"dark\" size=\"sm\" type=\"submit\" disabled={this.state.disabledButton}>{this.state.buttonText}</Button>\n            </Form>\n        )\n    }\n}\n\nexport default CoasterForm","import React, { Component } from \"react\";\nimport Service from \"../../service/Coaster.service\";\nimport AuthService from \"../../service/Auth.service\";\nimport { Container, Row, Col, Button, Modal } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport CoasterForm from \"./Coaster-form-edit\";\n\nclass CoasterDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coaster: {},\n      showModalWindow: false,\n      loggedInUser: null,\n    };\n    this._service = new Service();\n    this._authService = new AuthService();\n  }\n\n  componentDidMount = () => {\n    const coasterId = this.props.match.params.id;\n    this._service\n      .getOneCoaster(coasterId)\n      .then((theCoaster) => this.setState({ coaster: theCoaster.data }))\n      .catch((err) => console.log(err));\n  };\n\n  handleShow = () => this.setState({ showModalWindow: true });\n  handleClose = () => this.setState({ showModalWindow: false });\n\n  updateCoaster = () => {\n    const coasterId = this.props.match.params.id;\n    this._service\n      .getOneCoaster(coasterId)\n      .then((theCoaster) => this.setState({ coaster: theCoaster.data }))\n      .catch((err) => console.log(\"Error\", err));\n  };\n\n  deleteCoaster = () => {\n    const coasterId = this.props.match.params.id;\n    //;\n    this._service\n      .deleteCoaster(coasterId)\n      .then(() => this.props.history.push(\"/coasters\"))\n      .catch((err) => console.log(\"Error\", err));\n  };\n\n  fetchUser = () => {\n    if (this.state.loggedInUser === null) {\n      this._authService\n        .loggedin()\n        .then((theLoggedInUserFromTheServer) =>\n          this.setState({ loggedInUser: theLoggedInUserFromTheServer.data })\n        )\n        .catch((err) => {\n          this.setState({ loggedInUser: false });\n          console.log({ err });\n        });\n    }\n  };\n\n  render() {\n    this.fetchUser();\n    return (\n      <Container className=\"coaster-details\">\n        <h1>{this.state.coaster.title}</h1>\n        <hr />\n        <section>\n          <Row>\n            <Col md={6}>\n              <h2>Detalles</h2>\n              <p>\n                <strong>Descripción:</strong> {this.state.coaster.description}\n              </p>\n              <hr></hr>\n              <p>\n                <small>Longitud:</small> {this.state.coaster.length} |\n                Inversiones: {this.state.coaster.inversions}\n              </p>\n              <Link to=\"/coasters\" className=\"btn btn-dark\">\n                Volver\n              </Link>\n            </Col>\n            <Col md={{ span: 4, offset: 2 }}>\n              <img\n                src={this.state.coaster.imageUrl}\n                alt={this.state.coaster.title}\n              ></img>\n              <hr />\n              <div className=\"btnFlex\">\n                {this.state.loggedInUser && (\n                  <Button variant=\"dark\" onClick={this.deleteCoaster}>\n                    Editar\n                  </Button>\n                )}\n                {this.state.loggedInUser && (\n                  <Button variant=\"dark\" onClick={this.deleteCoaster}>\n                    Eliminar\n                  </Button>\n                )}\n              </div>\n            </Col>\n          </Row>\n          <Modal show={this.state.showModalWindow} onHide={this.handleClose}>\n            <Modal.Header closeButton>\n              <Modal.Title>Editar montaña rusa</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <CoasterForm\n                closeModalWindow={this.handleClose}\n                updateCoaster={this.updateCoaster}\n                coaster={this.state.coaster}\n              />\n            </Modal.Body>\n          </Modal>\n        </section>\n      </Container>\n    );\n  }\n}\n\nexport default CoasterDetail;","import React, { Component } from 'react'\nimport { Navbar, Nav } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport Service from '../../service/Auth.service'\n\nclass Navigation extends Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new Service()\n\n    }\n\n    logoutUser = () => {\n        this._service.logout()\n            .then(x => this.props.setUser(false))\n            .catch(err => console.log(err))\n    }\n\n    render() {\n\n        const saludo = this.props.loggedInUser ? this.props.loggedInUser.username : 'invitado'\n\n        return (\n\n            this.props.loggedInUser ?\n\n                <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\n                    <Navbar.Brand>Coaster Time!</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse>\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link as=\"li\"><Link to=\"/\">Inicio</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/profile\">Mi perfil</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/coasters\">Montañas rusas</Link></Nav.Link>\n                            <Nav.Link as=\"li\" className= \"pointer\" onClick={this.logoutUser}>Logout</Nav.Link>\n                        </Nav>\n                        <Nav className=\"ml-auto\">\n                            <Navbar.Text>Bienvenido {saludo}</Navbar.Text>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                :\n\n                <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\n                    <Navbar.Brand>Coaster Time!</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse>\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link as=\"li\"><Link to=\"/\">Inicio</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/coasters\">Montañas rusas</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/signup\">Registro</Link></Nav.Link>\n                            <Nav.Link as=\"li\"><Link to=\"/login\">Login</Link></Nav.Link>\n                        </Nav>\n                        <Nav className=\"ml-auto\">\n                            <Navbar.Text>Bienvenido {saludo}</Navbar.Text>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n        )\n    }\n}\n\nexport default Navigation","import React from 'react'\nimport { Container } from 'react-bootstrap'\n\nconst Index = () => {\n    return (\n      <Container>\n        <h1>Coaster App!</h1>\n        <hr />\n        <p>Diversión con React</p>\n        <img className=\"fpimg\" src=\"https://res.cloudinary.com/dwnz2epom/image/upload/v1586031816/coasters/rollerCoaster_wklhqv.jpg\" alt=\"RollerCoaster\"></img>\n      </Container>\n    );\n}\n\nexport default Index","import React from 'react'\nimport { Container } from \"react-bootstrap\";\n\nconst Profile = props => {\n\n    return (\n      <Container>\n        <h1>Bienvenido {props.loggedInUser.username}</h1>\n        <hr />\n      </Container>\n    )\n}\n\nexport default Profile","import React, { Component } from 'react'\nimport { Button, Form, Container } from 'react-bootstrap'\n\nimport Service from '../../service/Auth.service'\n\nclass SignupForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new Service()\n        this.state = { username: '', password: '' }\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        const { username, password } = this.state\n        this._service.signup(username, password)\n            .then(theNewUser => {\n                this.props.setUser(theNewUser.data)\n                this.setState({ username: '', password: '' })\n                this.props.history.push('/coasters')            // REDIRECCIONAMIENTO\n            })\n            .catch(err => console.log(err.response.data.message))\n    }\n\n    handleInputChange = e => {\n        let { name, value } = e.target\n        this.setState({ [name]: value })\n    }\n\n    render() {\n        return (\n            <Container>\n\n                <h1>Registro</h1>\n                <hr/>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Usuario</Form.Label>\n                        <Form.Control type=\"text\" name=\"username\" onChange={this.handleInputChange} value={this.state.username} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Contraseña</Form.Label>\n                        <Form.Control type=\"password\" name=\"password\" onChange={this.handleInputChange} value={this.state.password} />\n                    </Form.Group>\n                    <Button variant=\"dark\" type=\"submit\">Registrar</Button>\n                </Form>\n\n            </Container>\n        )\n    }\n}\n\nexport default SignupForm","import React, { Component } from 'react'\nimport { Button, Form, Container, Toast } from 'react-bootstrap'\n\nimport Service from '../../service/Auth.service'\n\nclass LoginForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this._service = new Service()\n        this.state = {\n            showToast: false,\n            toastText: '',\n            user: { username: '', password: '' }\n        }\n    }\n\n    handleInputChange = e => {\n        let { name, value } = e.target\n        this.setState({\n            user: { ...this.state.user, [name]: value }\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        const { username, password } = this.state.user\n        this._service.login(username, password)\n            .then(theLoggedUser => {\n                this.props.setUser(theLoggedUser.data)\n                this.setState({ username: '', password: '' })\n                this.props.history.push('/coasters')            // REDIRECCIONAMIENTO\n            })\n            .catch(err => {\n                this.handleToastOpen(err.response.data.message)\n            })\n    }\n\n    handleToastClose = () => this.setState({ showToast: false, toastText: '' })\n    handleToastOpen = text => this.setState({ showToast: true, toastText: text })\n\n    render() {\n        return (\n            <Container>\n                <h1>Iniciar sesión</h1>\n                <hr/>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Usuario</Form.Label>\n                        <Form.Control type=\"text\" name=\"username\" onChange={this.handleInputChange} value={this.state.username} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Contraseña</Form.Label>\n                        <Form.Control type=\"password\" name=\"password\" onChange={this.handleInputChange} value={this.state.password} />\n                    </Form.Group>\n                    <Button variant=\"dark\" type=\"submit\">Iniciar</Button>\n                </Form>\n                <Toast\n                    onClose={this.handleToastClose}\n                    show={this.state.showToast}\n                    delay={3000}\n                    autohide\n                    style={{\n                        position: 'fixed',\n                        right: '10px',\n                        bottom: '10px',\n                        minWidth: '250px'\n                    }}>\n                    <Toast.Header>\n                        <strong className=\"mr-auto\">Error</strong>\n                        <small>Session manager</small>\n                    </Toast.Header>\n                    <Toast.Body>{this.state.toastText}</Toast.Body>\n                </Toast>\n            </Container >\n        )\n    }\n}\n\nexport default LoginForm","import React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Service from \"./service/Auth.service\";\n\n/* CUSTOM COASTER COMPONENTS */\nimport CoasterList from \"./components/coasters/Coaster-list\";\nimport CoasterDetails from \"./components/coasters/Coaster-details\";\nimport CoasterForm from \"./components/coasters/Coaster-form\";\n\n/* CUSTOM UI COMPONENTS */\nimport Navbar from \"./components/ui/Navbar\";\n\n/* CUSTOM PAGE COMPONENTS */\nimport Index from \"./components/pages/Index\";\nimport Profile from \"./components/pages/Profile\";\n\n/* CUSTOM AUTH COMPONENTS */\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { loggedInUser: null };\n    this._service = new Service();\n  }\n\n  setTheUser = (user) => {\n    this.setState({ loggedInUser: user });\n  };\n\n  fetchUser = () => {\n    if (this.state.loggedInUser === null) {\n      this._service\n        .loggedin()\n        .then((theLoggedInUserFromTheServer) =>\n          this.setState({ loggedInUser: theLoggedInUserFromTheServer.data })\n        )\n        .catch((err) => {\n          this.setState({ loggedInUser: false });\n          console.log({ err });\n        });\n    }\n  };\n\n  render() {\n    this.fetchUser();\n\n    return (\n      <>\n        <Navbar\n          loggedInUser={this.state.loggedInUser}\n          setUser={this.setTheUser}\n        />\n\n        <Switch>\n          <Route exact path=\"/\" component={Index} />\n          <Route\n            exact\n            path=\"/coasters\"\n            render={() => (\n              <CoasterList loggedInUser={this.state.loggedInUser} />\n            )}\n          />\n          <Route path=\"/coasters/:id\" component={CoasterDetails} />\n          <Route path=\"/form\" component={CoasterForm} />\n\n          <Route\n            path=\"/signup\"\n            render={(match) => <Signup setUser={this.setTheUser} {...match} />}\n          />\n          <Route\n            path=\"/login\"\n            render={(match) => <Login setUser={this.setTheUser} {...match} />}\n          />\n          <Route\n            path=\"/profile\"\n            render={() =>\n              this.state.loggedInUser ? (\n                <Profile loggedInUser={this.state.loggedInUser} />\n              ) : (\n                <Redirect to=\"/\" />\n              )\n            }\n          />\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}